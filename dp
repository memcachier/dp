#!/usr/bin/env bash
DP_VERSION=1.4.1

set -e

function runssh() {
  ssh -o StrictHostKeyChecking=no -p $PORT $SSH_ARGS $REMOTE_USER@$REMOTE_HOST $2 "$1"
}

function runscp() {
  scp -o StrictHostKeyChecking=no -P $PORT $SSH_ARGS "$1" "$REMOTE_USER@$REMOTE_HOST:$2"
}

function basic_deploy() {
    appbase=$1
    repobase=$2
    apprel=$3
    timestamp=$4
    githash=$5

    git clone --local $repobase .dp/$timestamp
    cd .dp/$timestamp
    git submodule init
    git -c advice.detachedHead=false checkout $branch
    git submodule update --recursive
    cd ..

    if [ $apprel = "." ]
    then
        procfilelink=""
    else
        procfilelink="ln -s \$DIST_DIR/$apprel/Procfile \$DIST_DIR/Procfile"
    fi

    cmds=$(cat <<EOF
set -e
export APP_DIR=$APP_DIR
export DIST_DIR=$APP_DIR/versions/$timestamp
echo EXTRACTING APP...
tar xzf /tmp/$timestamp.tar.gz -C \$APP_DIR/versions
/bin/rm /tmp/$timestamp.tar.gz
cd \$DIST_DIR
echo $githash > .gitversion
cd \$DIST_DIR/$apprel
echo COMPILING...
. ./.dp/compile
$procfilelink
echo UPDATING CURRENT VERSION LINK...
rm -f \$DIST_DIR/../current
rm -f \$DIST_DIR/../current-appbase
ln -s \$DIST_DIR \$DIST_DIR/../current
ln -s \$DIST_DIR/$apprel \$DIST_DIR/../current-appbase
EOF
)

    echo "CREATING TARBALL..."
    tar -cz -f ./$timestamp.tar.gz ./$timestamp
    echo "UPLOADING TARBALL..."
    runscp ./$timestamp.tar.gz /tmp
    runssh "$cmds"
    /bin/rm -fr ./$timestamp ./$timestamp.tar.gz
}

function vm_deploy() {
    appbase=$1
    repobase=$2
    apprel=$3
    timestamp=$4
    githash=$5

    # Clone the local repository into a new build directory, reusing
    # the .stack-work directory in any currently existing build
    # directory.
    if [ -d $repobase/.dp-vm-build ]
    then
        git clone --local $repobase $repobase/.dp-vm-build-tmp
        mv $repobase/.dp-vm-build/.stack-work $repobase/.dp-vm-build-tmp
        /bin/rm -fr $repobase/.dp-vm-build
        mv $repobase/.dp-vm-build-tmp $repobase/.dp-vm-build
    else
        git clone --local $repobase $repobase/.dp-vm-build
    fi

    # Set up Git version to build.
    cd $repobase/.dp-vm-build
    git submodule init
    git -c advice.detachedHead=false checkout $branch
    git submodule update --recursive

    # Need to remove the Vagrantfile from the build directory,
    # otherwise Vagrant gets confused about which VM to use.
    /bin/rm -f $repobase/.dp-vm-build/Vagrantfile

    # Run build process in VM, extracting build artefacts.
    echo "BUILDING IN VM..."
    cd $repobase
    artefact_dir=/vagrant/$apprel/.dp/$timestamp
    echo "
set -e
cd /vagrant/.dp-vm-build/$apprel
echo COMPILING...
. .dp/compile
mkdir -p $artefact_dir
. .dp/extract $artefact_dir
echo $githash > $artefact_dir/.gitversion
" | vagrant ssh

    # Deploy process is similar to "normal" build.
    deploy_cmds=$(cat <<EOF
set -e
export APP_DIR=$APP_DIR
export DIST_DIR=$APP_DIR/versions/$timestamp
echo EXTRACTING APP...
tar xzf /tmp/$timestamp.tar.gz -C \$APP_DIR/versions
/bin/rm /tmp/$timestamp.tar.gz
cd \$DIST_DIR
echo UPDATING CURRENT VERSION LINK...
rm -f \$DIST_DIR/../current
rm -f \$DIST_DIR/../current-appbase
ln -s \$DIST_DIR \$DIST_DIR/../current
EOF
)

    # Create and upload deployment tarball and run deployment script
    # on target machine.
    echo "CREATING TARBALL..."
    cd $appbase/.dp
    tar -cz -f ./$timestamp.tar.gz ./$timestamp
    echo "UPLOADING TARBALL..."
    runscp ./$timestamp.tar.gz /tmp
    runssh "$deploy_cmds"
    /bin/rm -fr ./$timestamp ./$timestamp.tar.gz
}

function print_usage() {
    cat <<EOF
MemCachier Daemon Deployment Tool!
Version $DP_VERSION
Usage: `basename $0` [--version] [--help] <command> <args>

Commands are:
  init            Turn current directory into a DP app.
  init-server     Start a new DP install on the remote server.
  envs            Display the configured dp deployment environments.
  config          Display app environment.
  config:get      Display a specific app env variable.
  config:set      Set a specific app env variable.
  config:setbulk  Set many app env variables.
  config:unset    Remove a specific app env variable.
  deploy          Deploy the latest version of the managed app.
  start           Start the app on the remote server.
  stop            Stop the app on the remote server.
  restart         Restart the app on the remote server.
  status          Display running state of the app on the remote server.
  auto:on         Allow app to be started automatically.
  auto:off        Disable automatic starting of app.
  version         Display version of app deployed on remote server.
  old             Display old deployed versions.
  old:set         Set old version as current deployed version.
  old:clean       Remove all old versions but current.
  logs            Display latest log output of app.
  run             Run a command on the remote server.
  ssh             Login to the remote machine using ssh.

Controlling environments:
  To select the deployment environment in use, set the 'ENV' environment
  variable to the desired deployment target. E.g.,

  $ ENV=staging dp logs

EOF
}

# Default settings
PORT=22
BASE_DIR="\$HOME/dp-apps"
APP_NAME="app"
REMOTE_USER=${REMOTE_USER:-$(whoami)}
LOG_SIZE=10485760
LOG_FILES=10
defaultenv="default"
envdir=${ENV:-$defaultenv}

# Check some arguments
if [[ $# -eq 0 ]]
then
  print_usage
  exit 1
else
  command=$1
  shift
fi

# Run commands that work without a `.dp` directory
case "$command" in
  --version)
    echo "DP version ${DP_VERSION}"
    exit 0
    ;;

  --help)
    print_usage
    exit 0
    ;;
  help)
    print_usage
    exit 0
    ;;

  envs)
    if [[ ! -d ".dp" ]]; then
      echo "No .dp directory exists!"
      echo "This doesn't appear to be a DP app"
      exit 1
    fi
    ls -1 .dp | grep -v compile | grep -v default
    exit 0
    ;;

  init)
    if [[ -e ".dp/$envdir/config" ]]
    then
      echo ".dp directory already exists!"
      echo "This appears to already be a DP app"
      exit 1
    fi
    mkdir -p .dp/production
    mkdir -p .dp/staging
    ln -s production .dp/default
    cat << EOF > .dp/production/config
# Remote host to run your application
#REMOTE_HOST=...
#REMOTE_USER=...

# Directory to install your app to (Default: \$HOME)
#BASE_DIR=...
#APP_NAME=...

# Log files (can't change after init-server)
LOG_SIZE=10485760
LOG_FILES=10
EOF
  cp .dp/production/config .dp/staging/config
  cat << EOF > .dp/compile
# Place compilation commands here
EOF
    touch -a Procfile
    echo "Please edit .dp/*/config files now to setup the remote server"
    echo "Please edit Procfile to set your app"
    exit
    ;;
esac

# Source `.dp`
if [[ -e ".dp/$envdir/config" ]]
then
  . ".dp/$envdir/config"
else
  echo "No .dp/$envdir/ directory found"
  echo "Is this a DP managed app?"
  exit 1
fi

# Sanity check args
APP_DIR=$BASE_DIR/$APP_NAME

if [[ -z "$REMOTE_USER" ]]
then
  echo "REMOTE_USER not set in config file: .dp/$envdir/config"
  exit 1
fi
if [[ -z "$REMOTE_HOST" ]]
then
  echo "REMOTE_HOST not set in config file: .dp/$envdir/config"
  exit 1
fi

# Run commands that require a `.dp`
case "$command" in
  version)
    runssh "cat $APP_DIR/versions/current/.gitversion"
    ;;

  init-server)
    echo -n "Setting up server... "
    cmd=$(cat <<EOF
mkdir -p $APP_DIR/versions
mkdir -p $APP_DIR/.envdir
mkdir -p $APP_DIR/log
touch $APP_DIR/down
cat <<EF > $APP_DIR/run
#!/usr/bin/env bash
cd \\\`dirname \\\$0\\\`/versions/current
IFS="[: ]"
read name cmd < Procfile
echo "Starting \\\$name..."
exec envdir ../../.envdir bash -c "exec \\\$cmd 2>&1"
EF
chmod +x $APP_DIR/run
cat <<EF > $APP_DIR/log/run
#!/usr/bin/env bash
exec 2>&1
exec multilog t s$LOG_SIZE n$LOG_FILES ./main
EF
chmod +x $APP_DIR/log/run
EOF
)
    runssh "$cmd"
    echo "done"
    echo "Setup with auto:off, we recommend you use auto:on once deployed"
    ;;

  config)
    envs="cd $APP_DIR/.envdir && for e in \`ls\`; do echo -n \"\$e=\"; cat \$e; done"
    runssh "$envs"
    ;;

  config:get)
    runssh "cat $APP_DIR/.envdir/$1"
    ;;

  config:set)
    IFS="="
    read key value <<< "$1"
    cmd="mkdir -p $APP_DIR/.envdir && echo \"$value\" > $APP_DIR/.envdir/$key"
    runssh "$cmd"
    ;;

  config:setbulk)
    cmd="mkdir -p $APP_DIR/.envdir"
    IFS="="
    while read key value
    do
      cmd="$cmd; echo \"$value\" > $APP_DIR/.envdir/$key"
    done
    runssh "$cmd"
    ;;

  config:unset) runssh "rm -f $APP_DIR/.envdir/$1"
    ;;

  run) runssh "if [ -d $APP_DIR/versions/current-appbase ]; then cd $APP_DIR/versions/current-appbase ; else cd $APP_DIR/versions/current ; fi && envdir $APP_DIR/.envdir bash -c \"$*\"" "-t"
    ;;

  logs)
    args="-n 100 $*"
    runssh "tail $args $APP_DIR/log/main/current | tai64nlocal"
    ;;

  status) runssh "cd $APP_DIR && svstat ."
    ;;

  stop)
    echo -n "Stopping app... "
    runssh "svc -d $APP_DIR; echo done"
    ;;

  start)
    cmd=$(cat <<EOF
# check svsan running
svlaunch=1
if [[ -f $BASE_DIR/svscan.pid ]]
then
  svpid=\`cat $BASE_DIR/svscan.pid\`
  name=\`ps -p \$svpid -o comm h\`
  if [[ "\$name" == "svscan" ]]
  then
    svlaunch=0
  fi
fi

# svscan not running, lauch
if [[ \$svlaunch -eq 1 ]]
then
  echo -n "Starting svscan... "
  start-stop-daemon --no-close --background -m \
    --pidfile $BASE_DIR/svscan.pid \
    --start --startas \`which svscan\` -- $BASE_DIR \
    > $BASE_DIR/svscan.log
  if [[ \$? -gt 0 ]]
  then
    echo "failed"
    exit \$?
  else
    echo "done"
    sleep 2
  fi
fi

# check app up
echo -n "Starting app... "
svok $APP_DIR
if [[ \$? -gt 0 ]]
then
  echo "svscan running but not supervise for app!"
  exit 1
else
  svc -u $APP_DIR
  echo "done"
  exit 0
fi
EOF
)
    runssh "$cmd"
    ;;

  restart)
    echo "Restarting app..."
    runssh "svc -d $APP_DIR && svc -u $APP_DIR"
    ;;

  auto:on)
    echo -n "Enabling auto start of app... "
    runssh "rm -f $APP_DIR/down"
    echo "done"
    ;;

  auto:off)
    echo -n "Disabling auto start of app... "
    runssh "touch $APP_DIR/down"
    echo "done"
    ;;

  deploy)
    [[ $# -gt 0 ]] && branch=$1 || branch=master
    appbase=`pwd`
    while [ ! -d .git ]; do cd ..; done
    repobase=`pwd`
    apprel=`realpath --relative-to $repobase $appbase`
    cd $appbase
    echo "SETTING UP REPO FOR VERSION: $branch..."
    if git show-ref -s --tags --heads $branch
    then
        githash=`git show-ref -s --tags --heads $branch`
    else
        echo "UNKNOWN VERSION: $branch!"
        exit 1
    fi
    timestamp=`date -u +%Y%m%d%H%M`
    if [ "$DP_VM_BUILD" == "true" ]
    then
        vm_deploy $appbase $repobase $apprel $timestamp $githash
    else
        basic_deploy $appbase $repobase $apprel $timestamp $githash
    fi
    ;;

  ssh)
    runssh ""
    ;;

  old)
    echo "# Deployed versions of app"
    curr=$(runssh "stat $APP_DIR/versions/current | grep File | sed -n \"s/.*\/\([^/]*\)/\1/p\" | tr -d \"’'\"")
    all=$(runssh "ls $APP_DIR/versions/ | grep -v current")
    for a in $all
    do
      if [ "$a" = "$curr" ]
      then
        echo "$a (current)"
      else
        echo "$a"
      fi
    done
    ;;

  old:set)
    exists=$(runssh "stat $APP_DIR/versions/$1 &> /dev/null; echo \$?")
    if [ $exists -eq 0 ]
    then
      echo "Setting $1 as current deployed version"
      runssh "ln -s $APP_DIR/versions/$1 $APP_DIR/versions/current-new && \
        mv $APP_DIR/versions/current-new $APP_DIR/versions/current"
    else
      echo "Chosen version doesn't exist!"
      exit 1
    fi
    ;;

  old:clean)
    echo "Removing old deployed versions of app..."
    curr=$(runssh "stat $APP_DIR/versions/current | grep File | sed -n \"s/.*\/\([^/]*\)/\1/p\" | tr -d \"’'\"")
    all=$(runssh "ls $APP_DIR/versions/ | grep -v current")
    for a in $all
    do
      if [ "$a" != "$curr" ]
      then
        runssh "rm -r $APP_DIR/versions/$a"
        echo "- removed $a"
      fi
    done
    echo "done"
    ;;

  *)
    echo "Unknown command! ($command)"
    exit 1
    ;;

esac
